
Algoritm Fibonachi
/*1
function fibonacci(index) {
    let one = 0 
    let two = 1
    let response = 0

    if(index < 2)return index 
    for(let i = 2;i <= index;i++) {  O(n - 2) => O(n)
        response = (one + two) 
        one = two 
        two = response 
    }
    return response 
} 
console.log(fibonacci(9))
Time Complexity  => O(1 + n + n + n + n + 1)  => O(2 + 4n) => O(4n) => O(n)
Space Complexity  => O(1)
good Result => O(n)


/*2
function Fib(num) {
    if(num < 2) return num;
    return Fib(num - 1) + Fib(num - 2)  O(1^) + O(1^) => O(2^)
}
console.log(Fib(6))
time complexity => O(1^) + O(1^) => O(2^)
Space Complexity => O(n)
BAd Result => O(2^)







Time Complexity
rule 1 -> hastatunneri kanon hanel hastatunner@ O(1 + 1 + n ) => O(n)
rule 2 -> gumari kaon; gteq amenaarag achox termin@ O(n + 2n*n) => O(2n*n) => O(n^)
rule 3 -> artadryalneri kanon; hanel gorcakic@ O(2n*n) => O(n^)

/* 1
function Constant(arr) {
    let a = arr[0]; O(1)
    let b = " the first value is " + a ; O(1)
    return b + "!"; O(1)
}; O(1) + O(1) + O(1) => O(1) 

Constant explain 
O(340 + 1699) => O(1)
O(340 + 1699 + 1450 + 5486 ) => O(1)
O(102 + 82 * 2) = O(1)
O(n + 1000) => O(n)


/* 2
function Lineir(arr) {
    let total = 0; O(1)
    for(let i = 0;i < arr.length;i++) { O(n)
        total = total + arr[i] O(n)
    } 
    return total;O(1)
}; O(1 + n + n + 1 ) => O(2 + 2n) => O(2n) => O(n)

Lineir explain
O(4n) => O(n)
O(n/3) => O((1/3) * n) => O(n)
O(25n + 109) => O(25n) => O(n)


/* 3
function Quadradic(arr) { 
    for(let i = 0;i < arr.lentgh;i++) { O(n)
        for(let j = 0; j < arr.length;j++) { O(n*n)
            if(j !== i && arr[i] === arr[j]) { O(n*n)
                return arr[i] O(1)
            }
        }
    }
    return "not found" O(1)
} O(n + n^ + n^ + n + 1) O(2n + 2n^) => O(n + n^) => O(n^)

Quadradic explain

O(5 * n * n ) => O(5n^) => O(n^)
O(n^ + n) => O(n^)
O(5n^ + 8n + 9) => O(5n^ + n) => O(5n^) => O(n^)
O(log(n) + 9) => O(log(n))
O(log(n) + n) => O(n)
O(n * log(n) + n + 900) => O(n * log(n) + n) O(n * log(n))

Another example
function foo(z,m) {
    for(let i = 0;i < z;i++) { O(n)
        console.log("foo!" + m) 
        bar(z) 
    }
} 

function bar(q) { 
    for(let i = 0;i < q;i++) { o(n)
        console.log("bar!") 
    }
} foo * bar => O(n) * O(n) => O(n^)


function foo(z,m) {
    for(let i = 0;i < z;i++) { O(z)
        console.log("fsfsfs") O(z)
    }

    for(let i = 0;i < m;i++) { O(m)
        console.log("fsfsfs") O(m)
    }
} O(z + z) + O(m + m ) => O(2z + 2m) => O(z + m)


function twoInputMultyplay(a,b) {
    let z = 0   O(1)
    for(let i = 0;i < a; i++) {  O(n)
        for(let i = 0;i < b; i++) {  O(a * b)
            z = z + 1 ;  O(a * b)
        }
    }
    return z;
} o(a + 2(a*b)) => O(2(a*b)) => O(a*b)
  


Space Complexity
function Space(arr) {
    let total = 0;  O(1)
    for(let i = 0;i < arr.length;i++) {  O(1)
        total = total + arr[i] 
    } 
    return total;O(1)
}; O(1)

function Space2(arr) {
    let total = [];
    for(let i = 0;i < arr.length;i++) {  O(1)
        total[i] = arr[i] + 1  O(n)
    } 
    return total;
}; O(1)




good Result => O(1),O(log(n)) O(n),
Normal Result => O(n * log(n))
Bad Result => O(n^),O(n!)
